import type { LogService, TimeService } from 'common-services';
export interface JWT_CONFIG {
    secret?: string;
    duration: string;
    tolerance?: string;
    algorithms: Array<string>;
}
export interface JWT_ENV {
    JWT_SECRET?: string;
}
export declare type Payload = {
    [key: string]: any;
};
/**
@typedef JWTSignResult
*/
export declare type JWTSignResult = {
    token: string;
    issuedAt: number;
    expiresAt: number;
    validAt: number;
};
export interface JWTService<PAYLOAD extends {} = Payload> {
    sign: (payload: PAYLOAD, algorithm?: string) => Promise<JWTSignResult>;
    verify: (token: string) => Promise<PAYLOAD>;
}
export declare type JWTServiceConfig = {
    ENV?: JWT_ENV;
    JWT: JWT_CONFIG;
};
export declare type JWTServiceDependencies = JWTServiceConfig & {
    time?: TimeService;
    log?: LogService;
};
export interface JWTServiceInitializer<PAYLOAD extends {} = Payload> {
    (dependencies: JWTServiceDependencies): Promise<JWTService<PAYLOAD>>;
}
declare const wrappedInitializer: JWTServiceInitializer;
export default wrappedInitializer;
