{"version":3,"sources":["../src/jwt.test.ts"],"names":["YError","initJWTService","describe","log","jest","fn","time","afterEach","mockReset","test","JWT","duration","tolerance","algorithms","err","expect","errorCode","code","errorParams","params","logs","mock","calls","times","toMatchSnapshot","ENV","JWT_SECRET","mockReturnValueOnce","Date","getTime","jwt","token","sign","userId","organisationId","secret","decoded","verify"],"mappings":"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","sourcesContent":["// @ts-ignore: no type atm  ¯\\_(ツ)_/¯\nimport YError from 'yerror';\nimport initJWTService from './jwt';\n\ndescribe('jwt service', () => {\n  const log = jest.fn();\n  const time = jest.fn();\n\n  afterEach(() => {\n    log.mockReset();\n    time.mockReset();\n  });\n\n  describe('initializer', () => {\n    test('should fail without secret', async () => {\n      try {\n        await initJWTService({\n          JWT: {\n            duration: '2d',\n            tolerance: '2h',\n            algorithms: ['HS256'],\n          },\n          log,\n          time,\n        });\n        throw new YError('E_UNEXPECTED_SUCCESS');\n      } catch (err) {\n        expect({\n          errorCode: err.code,\n          errorParams: err.params,\n          logs: log.mock.calls,\n          times: time.mock.calls,\n        }).toMatchSnapshot();\n      }\n    });\n\n    test('should fail without algorithms', async () => {\n      try {\n        await initJWTService({\n          ENV: {\n            JWT_SECRET: 'test',\n          },\n          JWT: {\n            duration: '2d',\n            tolerance: '2h',\n            algorithms: [],\n          },\n          log,\n          time,\n        });\n        throw new YError('E_UNEXPECTED_SUCCESS');\n      } catch (err) {\n        expect({\n          errorCode: err.code,\n          errorParams: err.params,\n          logs: log.mock.calls,\n          times: time.mock.calls,\n        }).toMatchSnapshot();\n      }\n    });\n\n    test('should fail without duration', async () => {\n      try {\n        await initJWTService({\n          ENV: {\n            JWT_SECRET: 'test',\n          },\n          // @ts-ignore: no type atm ¯\\_(ツ)_/¯\n          JWT: {\n            tolerance: '2h',\n            algorithms: ['HS256'],\n          },\n          log,\n          time,\n        });\n        throw new YError('E_UNEXPECTED_SUCCESS');\n      } catch (err) {\n        expect({\n          errorCode: err.code,\n          errorParams: err.params,\n          logs: log.mock.calls,\n          times: time.mock.calls,\n        }).toMatchSnapshot();\n      }\n    });\n\n    test('should fail with a bad tolerance', async () => {\n      try {\n        await initJWTService({\n          ENV: {\n            JWT_SECRET: 'test',\n          },\n          JWT: {\n            duration: '2h',\n            tolerance: '',\n            algorithms: ['HS256'],\n          },\n          log,\n          time,\n        });\n        throw new YError('E_UNEXPECTED_SUCCESS');\n      } catch (err) {\n        expect({\n          errorCode: err.code,\n          errorParams: err.params,\n          logs: log.mock.calls,\n          times: time.mock.calls,\n        }).toMatchSnapshot();\n      }\n    });\n\n    test('should fail with a uninterpreted duration', async () => {\n      try {\n        await initJWTService({\n          ENV: {\n            JWT_SECRET: 'test',\n          },\n          JWT: {\n            duration: 'q',\n            algorithms: ['HS256'],\n          },\n          log,\n          time,\n        });\n        throw new YError('E_UNEXPECTED_SUCCESS');\n      } catch (err) {\n        expect({\n          errorCode: err.code,\n          errorParams: err.params,\n          logs: log.mock.calls,\n          times: time.mock.calls,\n        }).toMatchSnapshot();\n      }\n    });\n\n    test('should fallback to default tolerance', async () => {\n      await initJWTService({\n        ENV: {\n          JWT_SECRET: 'test',\n        },\n        JWT: {\n          duration: '2h',\n          algorithms: ['HS256'],\n        },\n        log,\n        time,\n      });\n    });\n  });\n\n  describe('sign', () => {\n    test('should work', async () => {\n      time.mockReturnValueOnce(new Date('2014-01-26T00:00:00Z').getTime());\n\n      const jwt = await initJWTService({\n        ENV: {\n          JWT_SECRET: 'secret',\n        },\n        JWT: {\n          duration: '2d',\n          tolerance: '2h',\n          algorithms: ['HS256'],\n        },\n        log,\n        time,\n      });\n      const token = await jwt.sign({\n        userId: 2,\n        organisationId: 3,\n      });\n\n      expect({\n        token,\n        logs: log.mock.calls,\n        times: time.mock.calls,\n      }).toMatchSnapshot();\n    });\n\n    test('should fail with a bad algorithm', async () => {\n      time.mockReturnValueOnce(new Date('2014-01-26T00:00:00Z').getTime());\n\n      const jwt = await initJWTService({\n        JWT: {\n          secret: 'secret',\n          duration: '2d',\n          tolerance: '2h',\n          algorithms: ['HS256'],\n        },\n        log,\n        time,\n      });\n\n      try {\n        await jwt.sign(\n          {\n            userId: 2,\n            organisationId: 3,\n          },\n          'LOLALG',\n        );\n        throw new YError('E_UNEXPECTED_SUCCESS');\n      } catch (err) {\n        expect({\n          errorCode: err.code,\n          errorParams: err.params,\n          logs: log.mock.calls,\n          times: time.mock.calls,\n        }).toMatchSnapshot();\n      }\n    });\n  });\n\n  describe('verify', () => {\n    test('should work', async () => {\n      time.mockReturnValueOnce(new Date('2014-01-26T00:00:00Z').getTime());\n\n      const jwt = await initJWTService({\n        JWT: {\n          secret: 'secret',\n          duration: '2d',\n          tolerance: '2h',\n          algorithms: ['HS256'],\n        },\n        log,\n        time,\n      });\n      const decoded = await jwt.verify(\n        'eyJhbGciOiJIUzI1NiJ9.' +\n          'eyJ1c2VySWQiOjIsIm9yZ2FuaXNhdGlvbklkIjozLCJpY' +\n          'XQiOjEzOTA2OTQ0MDAsImV4cCI6MTM5MDg2NzIwMCwibmJmIjoxMzkwNjk0NDAwfQ.' +\n          'DdWhIErffR-N-bTSsjr2tDOyinbMtYkL24IZxOVaB_0',\n      );\n\n      expect({\n        decoded,\n        logs: log.mock.calls,\n        times: time.mock.calls,\n      }).toMatchSnapshot();\n    });\n\n    test('should fail after the validity duration', async () => {\n      time.mockReturnValueOnce(new Date('2014-03-30T00:00:00Z').getTime());\n\n      const jwt = await initJWTService({\n        JWT: {\n          secret: 'secret',\n          duration: '2d',\n          tolerance: '2h',\n          algorithms: ['HS256'],\n        },\n        log,\n        time,\n      });\n\n      try {\n        await jwt.verify(\n          'eyJhbGciOiJIUzI1NiJ9.' +\n            'eyJ1c2VySWQiOjIsIm9yZ2FuaXNhdGlvbklkIjozLCJpY' +\n            'XQiOjEzOTA2OTQ0MDAsImV4cCI6MTM5MDg2NzIwMCwibmJmIjoxMzkwNjk0NDAwfQ.' +\n            'DdWhIErffR-N-bTSsjr2tDOyinbMtYkL24IZxOVaB_0',\n        );\n        throw new YError('E_UNEXPECTED_SUCCESS');\n      } catch (err) {\n        expect({\n          errorCode: err.code,\n          errorParams: err.params,\n          logs: log.mock.calls,\n          times: time.mock.calls,\n        }).toMatchSnapshot();\n      }\n    });\n\n    test('should fail with a malformed token', async () => {\n      time.mockReturnValueOnce(new Date('2014-03-30T00:00:00Z').getTime());\n\n      const jwt = await initJWTService({\n        JWT: {\n          secret: 'secret',\n          duration: '2d',\n          tolerance: '2h',\n          algorithms: ['HS256'],\n        },\n        log,\n        time,\n      });\n\n      try {\n        await jwt.verify('kikooolol');\n        throw new YError('E_UNEXPECTED_SUCCESS');\n      } catch (err) {\n        expect({\n          errorCode: err.code,\n          errorParams: err.params,\n          logs: log.mock.calls,\n          times: time.mock.calls,\n        }).toMatchSnapshot();\n      }\n    });\n  });\n});\n"],"file":"jwt.test.mjs"}