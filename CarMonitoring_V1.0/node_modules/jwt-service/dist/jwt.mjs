function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { autoService, name } from 'knifecycle';
import YError from 'yerror';
import ms from 'ms';
import jwt from 'jsonwebtoken';
const DEFAULT_ENV = {};
const wrappedInitializer = name('jwt', autoService(initJWT));
export default wrappedInitializer;

async function initJWT({
  ENV = DEFAULT_ENV,
  JWT,
  time = Date.now.bind(Date),
  log = noop
}) {
  const JWT_DURATION = readMS(JWT.duration, 'E_BAD_JWT_DURATION');
  const JWT_TOLERANCE = readMS(JWT.tolerance, 'E_BAD_JWT_TOLERANCE', 0);
  const jwtSecret = ENV.JWT_SECRET || JWT.secret;

  if (!jwtSecret) {
    throw new YError('E_NO_JWT_SECRET');
  }

  if (!(JWT.algorithms && JWT.algorithms.length)) {
    throw new YError('E_NO_JWT_ALGORITHMS');
  }

  const jwtService = {
    sign,
    verify
  };

  async function sign(payload, algorithm = JWT.algorithms[0]) {
    const issuedAt = time();
    const expiresAt = issuedAt + JWT_DURATION;
    const validAt = issuedAt;

    if (!JWT.algorithms.includes(algorithm)) {
      throw new YError('E_UNKNOWN_ALGORYTHM', algorithm, JWT.algorithms);
    }

    const token = await new Promise((resolve, reject) => {
      jwt.sign(JSON.stringify(_objectSpread(_objectSpread({}, payload), {}, {
        iat: Math.floor(issuedAt / 1000),
        exp: Math.floor(expiresAt / 1000),
        nbf: Math.floor(validAt / 1000)
      })), jwtSecret, {
        algorithm
      }, (err, token) => {
        if (err) {
          reject(YError.wrap(err, 'E_JWT', payload));
          return;
        }

        resolve(token);
      });
    });
    return {
      token,
      issuedAt,
      expiresAt,
      validAt
    };
  }

  async function verify(token) {
    return new Promise((resolve, reject) => {
      jwt.verify(token, jwtSecret, {
        algorithms: JWT.algorithms,
        clockTolerance: Math.floor(JWT_TOLERANCE / 1000),
        clockTimestamp: Math.floor(time() / 1000)
      }, (err, decoded) => {
        if (err) {
          if ('TokenExpiredError' === err.name) {
            reject(YError.wrap(err, 'E_JWT_EXPIRED', token));
            return;
          }

          if ('JsonWebTokenError' === err.name) {
            reject(YError.wrap(err, 'E_JWT_MALFORMED', token));
            return;
          }

          reject(YError.wrap(err, 'E_JWT', token));
          return;
        }

        resolve(decoded);
      });
    });
  }

  log('info', 'JWT service initialized!');
  return jwtService;
}

function noop(...args) {}

function readMS(value, errorCode, defaultValue = undefined) {
  const isRequired = 'undefined' === typeof defaultValue;
  const hasValue = 'undefined' !== typeof value;
  const finalValue = hasValue ? value : '' + defaultValue;

  if (isRequired && !hasValue) {
    throw new YError(errorCode, value);
  }

  try {
    const computedDuration = ms(finalValue);

    if ('undefined' === typeof computedDuration) {
      throw new YError(errorCode, value);
    }

    return computedDuration;
  } catch (err) {
    throw YError.wrap(err, errorCode, finalValue);
  }
}
//# sourceMappingURL=jwt.mjs.map