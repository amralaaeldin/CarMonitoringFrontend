{"version":3,"sources":["../src/sequence.js"],"names":["MAX_ITERATIONS","buildInitializationSequence","rootNode","batches","i","batch","recursivelyGetNextSequenceBatch","length","push","YError","node","nodeIsALeaf","__childNodes","nodeIsInBatches","every","bind","concat","__name","reduce","childNode","Set","some","includes"],"mappings":";;;;;;;AAAA;;;;AAEA,MAAMA,cAAc,GAAG,EAAvB;;AAEO,SAASC,2BAAT,CAAqCC,QAArC,EAA+C;AACpD,QAAMC,OAAO,GAAG,EAAhB;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,SAAOA,CAAC,GAAGJ,cAAX,EAA2B;AACzB,UAAMK,KAAK,GAAGC,+BAA+B,CAACJ,QAAD,EAAWC,OAAX,CAA7C;;AAEA,QAAI,MAAME,KAAK,CAACE,MAAhB,EAAwB;AACtB;AACD;;AACDJ,IAAAA,OAAO,CAACK,IAAR,CAAaH,KAAb;AACAD,IAAAA,CAAC;AACF;;AAED,MAAIA,CAAC,KAAKJ,cAAV,EAA0B;AACxB,UAAM,IAAIS,eAAJ,CAAW,gCAAX,CAAN;AACD;;AAED,SAAON,OAAP;AACD;;AAED,SAASG,+BAAT,CAAyCI,IAAzC,EAA+CP,OAA/C,EAAwDE,KAAK,GAAG,EAAhE,EAAoE;AAClE,QAAMM,WAAW,GAAG,EAAED,IAAI,CAACE,YAAL,IAAqBF,IAAI,CAACE,YAAL,CAAkBL,MAAzC,CAApB;;AAEA,MAAIM,eAAe,CAACV,OAAD,EAAUO,IAAV,CAAnB,EAAoC;AAClC,WAAOL,KAAP;AACD;;AAED,MACEM,WAAW,IACXD,IAAI,CAACE,YAAL,CAAkBE,KAAlB,CAAwBD,eAAe,CAACE,IAAhB,CAAqB,IAArB,EAA2BZ,OAA3B,CAAxB,CAFF,EAGE;AACA,WAAOE,KAAK,CAACW,MAAN,CAAaN,IAAI,CAACO,MAAlB,CAAP;AACD;;AAED,SAAOP,IAAI,CAACE,YAAL,CAAkBM,MAAlB,CACL,CAACb,KAAD,EAAQc,SAAR,KAAsB,CACpB,GAAG,IAAIC,GAAJ,CAAQd,+BAA+B,CAACa,SAAD,EAAYhB,OAAZ,EAAqBE,KAArB,CAAvC,CADiB,CADjB,EAILA,KAJK,CAAP;AAMD;;AAED,SAASQ,eAAT,CAAyBV,OAAzB,EAAkCO,IAAlC,EAAwC;AACtC,SAAOP,OAAO,CAACkB,IAAR,CAAchB,KAAD,IAAWA,KAAK,CAACiB,QAAN,CAAeZ,IAAI,CAACO,MAApB,CAAxB,CAAP;AACD","sourcesContent":["import YError from 'yerror';\n\nconst MAX_ITERATIONS = 99;\n\nexport function buildInitializationSequence(rootNode) {\n  const batches = [];\n  let i = 0;\n\n  while (i < MAX_ITERATIONS) {\n    const batch = recursivelyGetNextSequenceBatch(rootNode, batches);\n\n    if (0 === batch.length) {\n      break;\n    }\n    batches.push(batch);\n    i++;\n  }\n\n  if (i === MAX_ITERATIONS) {\n    throw new YError('E_PROBABLE_CIRCULAR_DEPENDENCY');\n  }\n\n  return batches;\n}\n\nfunction recursivelyGetNextSequenceBatch(node, batches, batch = []) {\n  const nodeIsALeaf = !(node.__childNodes && node.__childNodes.length);\n\n  if (nodeIsInBatches(batches, node)) {\n    return batch;\n  }\n\n  if (\n    nodeIsALeaf ||\n    node.__childNodes.every(nodeIsInBatches.bind(null, batches))\n  ) {\n    return batch.concat(node.__name);\n  }\n\n  return node.__childNodes.reduce(\n    (batch, childNode) => [\n      ...new Set(recursivelyGetNextSequenceBatch(childNode, batches, batch)),\n    ],\n    batch,\n  );\n}\n\nfunction nodeIsInBatches(batches, node) {\n  return batches.some((batch) => batch.includes(node.__name));\n}\n"],"file":"sequence.js"}