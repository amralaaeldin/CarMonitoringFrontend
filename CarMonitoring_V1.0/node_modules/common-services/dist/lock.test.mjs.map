{"version":3,"sources":["../src/lock.test.ts"],"names":["assert","sinon","Knifecycle","constant","initLockService","describe","log","stub","delay","create","clear","beforeEach","reset","test","lock","deepEqual","args","take","release","Promise","all","then","expect","logCalls","toMatchSnapshot","done","register","run","catch"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,IAAqBC,QAArB,QAAqC,YAArC;AACA,OAAOC,eAAP,MAA4B,QAA5B;AAGAC,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChC,QAAMC,GAAG,GAAGL,KAAK,CAACM,IAAN,EAAZ;AACA,QAAMC,KAAmB,GAAG;AAC1BC,IAAAA,MAAM,EAAER,KAAK,CAACM,IAAN,EADkB;AAE1BG,IAAAA,KAAK,EAAET,KAAK,CAACM,IAAN;AAFmB,GAA5B;AAKAI,EAAAA,UAAU,CAAC,MAAM;AACfL,IAAAA,GAAG,CAACM,KAAJ;AACD,GAFS,CAAV;AAIAC,EAAAA,IAAI,CAAC,aAAD,EAAgB,YAAY;AAC9B,UAAMC,IAAI,GAAG,MAAMV,eAAe,CAAC;AACjCE,MAAAA,GADiC;AAEjCE,MAAAA;AAFiC,KAAD,CAAlC;AAKAR,IAAAA,MAAM,CAAC,aAAa,OAAOc,IAArB,CAAN;AACAd,IAAAA,MAAM,CAACe,SAAP,CAAiBT,GAAG,CAACU,IAArB,EAA2B,CAAC,CAAC,OAAD,EAAU,gCAAV,CAAD,CAA3B;AAEA,UAAMF,IAAI,CAACG,IAAL,CAAU,KAAV,CAAN;AACA,UAAMH,IAAI,CAACG,IAAL,CAAU,MAAV,CAAN;AACAH,IAAAA,IAAI,CAACI,OAAL,CAAa,KAAb;AACAJ,IAAAA,IAAI,CAACI,OAAL,CAAa,MAAb;AAEA,UAAMC,OAAO,CAACC,GAAR,CAAY,CAChBN,IAAI,CAACG,IAAL,CAAU,KAAV,EAAiBI,IAAjB,CAAsB,MAAMP,IAAI,CAACI,OAAL,CAAa,KAAb,CAA5B,CADgB,EAEhBJ,IAAI,CAACG,IAAL,CAAU,KAAV,EAAiBI,IAAjB,CAAsB,MAAMP,IAAI,CAACI,OAAL,CAAa,KAAb,CAA5B,CAFgB,EAGhBJ,IAAI,CAACG,IAAL,CAAU,KAAV,EAAiBI,IAAjB,CAAsB,MAAMP,IAAI,CAACI,OAAL,CAAa,KAAb,CAA5B,CAHgB,EAIhBJ,IAAI,CAACG,IAAL,CAAU,KAAV,EAAiBI,IAAjB,CAAsB,MAAMP,IAAI,CAACI,OAAL,CAAa,KAAb,CAA5B,CAJgB,CAAZ,CAAN;AAOAI,IAAAA,MAAM,CAAC;AACLC,MAAAA,QAAQ,EAAEjB,GAAG,CAACU;AADT,KAAD,CAAN,CAEGQ,eAFH;AAGD,GAxBG,CAAJ;AA0BAX,EAAAA,IAAI,CAAC,6BAAD,EAAiCY,IAAD,IAAU;AAC5C,QAAIvB,UAAJ,GACGwB,QADH,CACYtB,eADZ,EAEGsB,QAFH,CAEYvB,QAAQ,CAAC,KAAD,EAAQG,GAAR,CAFpB,EAGGoB,QAHH,CAGYvB,QAAQ,CAAC,OAAD,EAAUK,KAAV,CAHpB,EAIGmB,GAJH,CAIO,CAAC,MAAD,CAJP,EAKGN,IALH,CAKQ,CAAC;AAAEP,MAAAA;AAAF,KAAD,KAAc;AAClBd,MAAAA,MAAM,CAACc,IAAD,CAAN;AACAd,MAAAA,MAAM,CAACe,SAAP,CAAiBT,GAAG,CAACU,IAArB,EAA2B,CACzB,CAAC,OAAD,EAAU,gCAAV,CADyB,CAA3B;AAGD,KAVH,EAWGK,IAXH,CAWQ,MAAMI,IAAI,EAXlB,EAYGG,KAZH,CAYSH,IAZT;AAaD,GAdG,CAAJ;AAeD,CApDO,CAAR","sourcesContent":["import assert from 'assert';\nimport sinon from 'sinon';\nimport Knifecycle, { constant } from 'knifecycle';\nimport initLockService from './lock';\nimport type { DelayService } from './delay';\n\ndescribe('initLockService', () => {\n  const log = sinon.stub();\n  const delay: DelayService = {\n    create: sinon.stub(),\n    clear: sinon.stub(),\n  };\n\n  beforeEach(() => {\n    log.reset();\n  });\n\n  test('should work', async () => {\n    const lock = await initLockService({\n      log,\n      delay,\n    });\n\n    assert('object' === typeof lock);\n    assert.deepEqual(log.args, [['debug', 'ðŸ”’ - Lock service initialized.']]);\n\n    await lock.take('key');\n    await lock.take('key2');\n    lock.release('key');\n    lock.release('key2');\n\n    await Promise.all([\n      lock.take('key').then(() => lock.release('key')),\n      lock.take('key').then(() => lock.release('key')),\n      lock.take('key').then(() => lock.release('key')),\n      lock.take('key').then(() => lock.release('key')),\n    ]);\n\n    expect({\n      logCalls: log.args,\n    }).toMatchSnapshot();\n  });\n\n  test('should work with Knifecycle', (done) => {\n    new Knifecycle()\n      .register(initLockService)\n      .register(constant('log', log))\n      .register(constant('delay', delay))\n      .run(['lock'])\n      .then(({ lock }) => {\n        assert(lock);\n        assert.deepEqual(log.args, [\n          ['debug', 'ðŸ”’ - Lock service initialized.'],\n        ]);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n});\n"],"file":"lock.test.mjs"}