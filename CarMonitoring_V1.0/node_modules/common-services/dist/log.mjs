import { autoService, options } from 'knifecycle';

function noop() {}

export let StdStream;

(function (StdStream) {
  StdStream["STD_OUT"] = "STD_OUT";
  StdStream["STD_ERR"] = "STD_ERR";
})(StdStream || (StdStream = {}));

export const DEFAULT_LOGGER = {
  debug: noop,
  error: noop,
  info: noop,
  warning: noop
};
export const DEFAULT_LOG_ROUTING = {
  error: StdStream.STD_ERR,
  stack: StdStream.STD_ERR,
  warning: StdStream.STD_ERR,
  info: StdStream.STD_OUT
};
export default options({
  singleton: true
}, autoService(initLog), true);

async function initLog({
  LOG_ROUTING = DEFAULT_LOG_ROUTING,
  logger = DEFAULT_LOGGER,
  debug = noop
}) {
  log('debug', 'ðŸ‘£ - Logging service initialized.');
  return log;

  function log(type, ...args) {
    if (LOG_ROUTING[type] === StdStream.STD_ERR) {
      logger.error(...args);
      return;
    }

    if (LOG_ROUTING[type] === StdStream.STD_OUT) {
      logger.info(...args);
      return;
    }

    debug(...args);
  }
}
//# sourceMappingURL=log.mjs.map