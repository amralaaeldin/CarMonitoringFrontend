{"version":3,"sources":["../src/time.test.ts"],"names":["assert","sinon","Knifecycle","constant","initTimeService","describe","log","stub","beforeEach","reset","test","done","then","time","deepEqual","args","catch","now","register","run"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,IAAqBC,QAArB,QAAqC,YAArC;AACA,OAAOC,eAAP,MAA4B,QAA5B;AAEAC,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChC,QAAMC,GAAG,GAAGL,KAAK,CAACM,IAAN,EAAZ;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACfF,IAAAA,GAAG,CAACG,KAAJ;AACD,GAFS,CAAV;AAIAC,EAAAA,IAAI,CAAC,aAAD,EAAiBC,IAAD,IAAU;AAC5BP,IAAAA,eAAe,CAAC;AACdE,MAAAA;AADc,KAAD,CAAf,CAGGM,IAHH,CAGSC,IAAD,IAAU;AACdb,MAAAA,MAAM,CAAC,eAAe,OAAOa,IAAvB,CAAN;AACAb,MAAAA,MAAM,CAACc,SAAP,CAAiBR,GAAG,CAACS,IAArB,EAA2B,CACzB,CAAC,OAAD,EAAU,+BAAV,CADyB,CAA3B;AAGD,KARH,EASGH,IATH,CASQ,MAAMD,IAAI,EATlB,EAUGK,KAVH,CAUSL,IAVT;AAWD,GAZG,CAAJ;AAcAN,EAAAA,QAAQ,CAAC,MAAD,EAAS,MAAM;AACrBK,IAAAA,IAAI,CAAC,aAAD,EAAiBC,IAAD,IAAU;AAC5BP,MAAAA,eAAe,CAAC;AACdE,QAAAA;AADc,OAAD,CAAf,CAGGM,IAHH,CAGSC,IAAD,IAAU;AACdP,QAAAA,GAAG,CAACG,KAAJ;AACA,cAAMQ,GAAG,GAAGJ,IAAI,EAAhB;AAEAb,QAAAA,MAAM,CAACc,SAAP,CAAiBR,GAAG,CAACS,IAArB,EAA2B,CACzB,CAAC,OAAD,EAAU,yBAAV,EAAqCE,GAArC,CADyB,CAA3B;AAGD,OAVH,EAWGL,IAXH,CAWQ,MAAMD,IAAI,EAXlB,EAYGK,KAZH,CAYSL,IAZT;AAaD,KAdG,CAAJ;AAeD,GAhBO,CAAR;AAkBAD,EAAAA,IAAI,CAAC,6BAAD,EAAiCC,IAAD,IAAU;AAC5C,QAAIT,UAAJ,GACGgB,QADH,CACYd,eADZ,EAEGc,QAFH,CAEYf,QAAQ,CAAC,KAAD,EAAQG,GAAR,CAFpB,EAGGa,GAHH,CAGO,CAAC,MAAD,CAHP,EAIGP,IAJH,CAIQ,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAClBb,MAAAA,MAAM,CAACa,IAAD,CAAN;AACAb,MAAAA,MAAM,CAACc,SAAP,CAAiBR,GAAG,CAACS,IAArB,EAA2B,CACzB,CAAC,OAAD,EAAU,+BAAV,CADyB,CAA3B;AAGD,KATH,EAUGH,IAVH,CAUQ,MAAMD,IAAI,EAVlB,EAWGK,KAXH,CAWSL,IAXT;AAYD,GAbG,CAAJ;AAcD,CArDO,CAAR","sourcesContent":["import assert from 'assert';\nimport sinon from 'sinon';\nimport Knifecycle, { constant } from 'knifecycle';\nimport initTimeService from './time';\n\ndescribe('initTimeService', () => {\n  const log = sinon.stub();\n\n  beforeEach(() => {\n    log.reset();\n  });\n\n  test('should work', (done) => {\n    initTimeService({\n      log,\n    })\n      .then((time) => {\n        assert('function' === typeof time);\n        assert.deepEqual(log.args, [\n          ['debug', '⏰ - Time service initialized.'],\n        ]);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n\n  describe('time', () => {\n    test('should work', (done) => {\n      initTimeService({\n        log,\n      })\n        .then((time) => {\n          log.reset();\n          const now = time();\n\n          assert.deepEqual(log.args, [\n            ['debug', '⏰ - Picked a timestamp:', now],\n          ]);\n        })\n        .then(() => done())\n        .catch(done);\n    });\n  });\n\n  test('should work with Knifecycle', (done) => {\n    new Knifecycle()\n      .register(initTimeService)\n      .register(constant('log', log))\n      .run(['time'])\n      .then(({ time }) => {\n        assert(time);\n        assert.deepEqual(log.args, [\n          ['debug', '⏰ - Time service initialized.'],\n        ]);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n});\n"],"file":"time.test.mjs"}