"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _sinon = _interopRequireDefault(require("sinon"));

var _knifecycle = _interopRequireWildcard(require("knifecycle"));

var _delay = _interopRequireDefault(require("./delay"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint max-nested-callbacks:0 */
describe('initDelayService', () => {
  const log = _sinon.default.stub();

  beforeEach(() => {
    log.reset();
  });
  test('should work', async () => {
    const delay = await (0, _delay.default)({
      log
    });
    (0, _assert.default)('function' === typeof delay.service.create);
    (0, _assert.default)('function' === typeof delay.service.clear);
    (0, _assert.default)('function' === typeof delay.dispose);

    _assert.default.deepEqual(log.args, [['debug', '⌛ - Delay service initialized.']]);
  });
  describe('delay.create', () => {
    let setTimeoutStub;
    beforeEach(() => {
      setTimeoutStub = _sinon.default.stub(global, 'setTimeout');
    });
    afterEach(() => {
      setTimeoutStub.restore();
    });
    test('should work', async () => {
      const {
        service: delay
      } = await (0, _delay.default)({
        log
      });
      let delayPromise;
      log.reset();
      setTimeoutStub.returns({});
      delayPromise = delay.create(1000);

      _assert.default.equal(setTimeoutStub.args.length, 1);

      _assert.default.equal(setTimeoutStub.args[0][1], 1000);

      _assert.default.deepEqual(log.args, [['debug', '⏳ - Created a delay:', 1000]]); // Run set callback


      setTimeoutStub.args[0][0]();
      await delayPromise;
    });
  });
  describe('delay.clear', () => {
    let setTimeoutStub;
    let clearTimeoutStub;
    beforeEach(() => {
      setTimeoutStub = _sinon.default.stub(global, 'setTimeout');
      clearTimeoutStub = _sinon.default.stub(global, 'clearTimeout');
      setTimeoutStub.returns({});
    });
    afterEach(() => {
      setTimeoutStub.restore();
      clearTimeoutStub.restore();
    });
    test('should fail with bad promise', async () => {
      const {
        service: delay
      } = await (0, _delay.default)({
        log
      });
      log.reset();
      await delay.clear(Promise.resolve()).catch(err => {
        _assert.default.equal(err.code, 'E_BAD_DELAY');
      });
    });
    test('should work', async () => {
      const {
        service: delay
      } = await (0, _delay.default)({
        log
      });
      const delayPromise = delay.create(10000);
      await Promise.resolve();
      log.reset();
      await Promise.all([delay.clear(delayPromise), delayPromise.catch(err => {
        _assert.default.equal(err.code, 'E_DELAY_CLEARED');
      })]);

      _assert.default.deepEqual(log.args, [['debug', '⏳ - Cleared a delay']]);
    });
  });
  test('should work with Knifecycle', async () => {
    const {
      delay
    } = await new _knifecycle.default().register(_delay.default).register((0, _knifecycle.constant)('log', log)).run(['delay']);
    (0, _assert.default)(delay);

    _assert.default.deepEqual(log.args, [['debug', '⌛ - Delay service initialized.']]);
  });
});
//# sourceMappingURL=delay.test.js.map