{"version":3,"sources":["../src/counter.test.ts"],"names":["assert","sinon","Knifecycle","constant","initCounterService","describe","log","stub","beforeEach","reset","test","counter","deepEqual","args","num","register","run"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,IAAqBC,QAArB,QAAqC,YAArC;AACA,OAAOC,kBAAP,MAA+B,WAA/B;AAEAC,QAAQ,CAAC,oBAAD,EAAuB,MAAM;AACnC,QAAMC,GAAG,GAAGL,KAAK,CAACM,IAAN,EAAZ;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACfF,IAAAA,GAAG,CAACG,KAAJ;AACD,GAFS,CAAV;AAIAC,EAAAA,IAAI,CAAC,aAAD,EAAgB,YAAY;AAC9B,UAAMC,OAAO,GAAG,MAAMP,kBAAkB,CAAC;AACvCE,MAAAA;AADuC,KAAD,CAAxC;AAIAN,IAAAA,MAAM,CAAC,eAAe,OAAOW,OAAvB,CAAN;AACAX,IAAAA,MAAM,CAACY,SAAP,CAAiBN,GAAG,CAACO,IAArB,EAA2B,CACzB,CAAC,OAAD,EAAU,mCAAV,CADyB,CAA3B;AAGD,GATG,CAAJ;AAWAR,EAAAA,QAAQ,CAAC,SAAD,EAAY,MAAM;AACxBK,IAAAA,IAAI,CAAC,aAAD,EAAgB,YAAY;AAC9B,YAAMC,OAAO,GAAG,MAAMP,kBAAkB,CAAC;AACvCE,QAAAA;AADuC,OAAD,CAAxC;AAIAA,MAAAA,GAAG,CAACG,KAAJ;AAEA,YAAMK,GAAG,GAAG,MAAMH,OAAO,EAAzB;AAEAX,MAAAA,MAAM,CAACY,SAAP,CAAiBN,GAAG,CAACO,IAArB,EAA2B,CAAC,CAAC,OAAD,EAAU,sBAAV,EAAkCC,GAAlC,CAAD,CAA3B;AACD,KAVG,CAAJ;AAWD,GAZO,CAAR;AAcAJ,EAAAA,IAAI,CAAC,6BAAD,EAAgC,YAAY;AAC9C,UAAM;AAAEC,MAAAA;AAAF,QAAc,MAAM,IAAIT,UAAJ,GACvBa,QADuB,CACdX,kBADc,EAEvBW,QAFuB,CAEdZ,QAAQ,CAAC,KAAD,EAAQG,GAAR,CAFM,EAGvBU,GAHuB,CAGnB,CAAC,SAAD,CAHmB,CAA1B;AAKAhB,IAAAA,MAAM,CAACW,OAAD,CAAN;AACAX,IAAAA,MAAM,CAACY,SAAP,CAAiBN,GAAG,CAACO,IAArB,EAA2B,CACzB,CAAC,OAAD,EAAU,mCAAV,CADyB,CAA3B;AAGD,GAVG,CAAJ;AAWD,CA3CO,CAAR","sourcesContent":["import assert from 'assert';\nimport sinon from 'sinon';\nimport Knifecycle, { constant } from 'knifecycle';\nimport initCounterService from './counter';\n\ndescribe('initCounterService', () => {\n  const log = sinon.stub();\n\n  beforeEach(() => {\n    log.reset();\n  });\n\n  test('should work', async () => {\n    const counter = await initCounterService({\n      log,\n    });\n\n    assert('function' === typeof counter);\n    assert.deepEqual(log.args, [\n      ['debug', 'ðŸ“‡ - Counter service initialized.'],\n    ]);\n  });\n\n  describe('counter', () => {\n    test('should work', async () => {\n      const counter = await initCounterService({\n        log,\n      });\n\n      log.reset();\n\n      const num = await counter();\n\n      assert.deepEqual(log.args, [['debug', 'ðŸ“‡ - Picked a count:', num]]);\n    });\n  });\n\n  test('should work with Knifecycle', async () => {\n    const { counter } = await new Knifecycle()\n      .register(initCounterService)\n      .register(constant('log', log))\n      .run(['counter']);\n\n    assert(counter);\n    assert.deepEqual(log.args, [\n      ['debug', 'ðŸ“‡ - Counter service initialized.'],\n    ]);\n  });\n});\n"],"file":"counter.test.mjs"}