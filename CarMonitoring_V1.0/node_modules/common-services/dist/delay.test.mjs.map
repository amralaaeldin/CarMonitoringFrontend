{"version":3,"sources":["../src/delay.test.ts"],"names":["assert","sinon","Knifecycle","constant","initDelayService","describe","log","stub","beforeEach","reset","test","delay","service","create","clear","dispose","deepEqual","args","setTimeoutStub","global","afterEach","restore","delayPromise","returns","equal","length","clearTimeoutStub","Promise","resolve","catch","err","code","all","register","run"],"mappings":"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","sourcesContent":["/* eslint max-nested-callbacks:0 */\nimport assert from 'assert';\nimport sinon from 'sinon';\nimport Knifecycle, { constant } from 'knifecycle';\nimport initDelayService from './delay';\n\ndescribe('initDelayService', () => {\n  const log = sinon.stub();\n\n  beforeEach(() => {\n    log.reset();\n  });\n\n  test('should work', async () => {\n    const delay = await initDelayService({\n      log,\n    });\n\n    assert('function' === typeof delay.service.create);\n    assert('function' === typeof delay.service.clear);\n    assert('function' === typeof delay.dispose);\n    assert.deepEqual(log.args, [['debug', '⌛ - Delay service initialized.']]);\n  });\n\n  describe('delay.create', () => {\n    let setTimeoutStub;\n\n    beforeEach(() => {\n      setTimeoutStub = sinon.stub(global, 'setTimeout');\n    });\n\n    afterEach(() => {\n      setTimeoutStub.restore();\n    });\n\n    test('should work', async () => {\n      const { service: delay } = await initDelayService({\n        log,\n      });\n\n      let delayPromise;\n\n      log.reset();\n      setTimeoutStub.returns({});\n\n      delayPromise = delay.create(1000);\n      assert.equal(setTimeoutStub.args.length, 1);\n      assert.equal(setTimeoutStub.args[0][1], 1000);\n      assert.deepEqual(log.args, [['debug', '⏳ - Created a delay:', 1000]]);\n      // Run set callback\n      setTimeoutStub.args[0][0]();\n\n      await delayPromise;\n    });\n  });\n\n  describe('delay.clear', () => {\n    let setTimeoutStub;\n    let clearTimeoutStub;\n\n    beforeEach(() => {\n      setTimeoutStub = sinon.stub(global, 'setTimeout');\n      clearTimeoutStub = sinon.stub(global, 'clearTimeout');\n      setTimeoutStub.returns({});\n    });\n\n    afterEach(() => {\n      setTimeoutStub.restore();\n      clearTimeoutStub.restore();\n    });\n\n    test('should fail with bad promise', async () => {\n      const { service: delay } = await initDelayService({\n        log,\n      });\n\n      log.reset();\n\n      await delay.clear(Promise.resolve()).catch((err) => {\n        assert.equal(err.code, 'E_BAD_DELAY');\n      });\n    });\n\n    test('should work', async () => {\n      const { service: delay } = await initDelayService({\n        log,\n      });\n      const delayPromise = delay.create(10000);\n\n      await Promise.resolve();\n\n      log.reset();\n\n      await Promise.all([\n        delay.clear(delayPromise),\n        delayPromise.catch((err) => {\n          assert.equal(err.code, 'E_DELAY_CLEARED');\n        }),\n      ]);\n      assert.deepEqual(log.args, [['debug', '⏳ - Cleared a delay']]);\n    });\n  });\n\n  test('should work with Knifecycle', async () => {\n    const { delay } = await new Knifecycle()\n      .register(initDelayService)\n      .register(constant('log', log))\n      .run(['delay']);\n\n    assert(delay);\n    assert.deepEqual(log.args, [['debug', '⌛ - Delay service initialized.']]);\n  });\n});\n"],"file":"delay.test.mjs"}