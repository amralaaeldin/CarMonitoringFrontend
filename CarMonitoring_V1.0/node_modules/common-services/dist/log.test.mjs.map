{"version":3,"sources":["../src/log.test.ts"],"names":["assert","sinon","Knifecycle","constant","initLogService","describe","debug","stub","logger","error","info","beforeEach","reset","test","done","then","fn","deepEqual","args","catch","log","register","run"],"mappings":"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","sourcesContent":["'use strict';\n\nimport assert from 'assert';\nimport sinon from 'sinon';\nimport Knifecycle, { constant } from 'knifecycle';\nimport initLogService from './log';\n\ndescribe('initLogService', () => {\n  const debug = sinon.stub();\n  const logger = {\n    error: sinon.stub(),\n    info: sinon.stub(),\n  };\n\n  beforeEach(() => {\n    debug.reset();\n    logger.info.reset();\n    logger.error.reset();\n  });\n\n  test('should work', (done) => {\n    initLogService({\n      debug,\n      logger,\n    })\n      .then((fn) => {\n        assert('function' === typeof fn);\n        assert.deepEqual(debug.args, [['ðŸ‘£ - Logging service initialized.']]);\n        assert.deepEqual(logger.info.args, []);\n        assert.deepEqual(logger.error.args, []);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n\n  describe('log', () => {\n    test('should work', (done) => {\n      initLogService({\n        debug,\n        logger,\n      })\n        .then((log) => {\n          debug.reset();\n          log('debug', 'debug test');\n          log('stack', 'stack test');\n          log('info', 'info test');\n          log('error', 'error test');\n          assert.deepEqual(debug.args, [['debug test']]);\n          assert.deepEqual(logger.info.args, [['info test']]);\n          assert.deepEqual(logger.error.args, [['stack test'], ['error test']]);\n        })\n        .then(() => done())\n        .catch(done);\n    });\n  });\n\n  test('should work with Knifecycle', (done) => {\n    new Knifecycle()\n      .register(initLogService)\n      .register(constant('debug', debug))\n      .register(constant('logger', logger))\n      .run(['log'])\n      .then(({ log }) => {\n        debug.reset();\n        log('debug', 'debug test');\n        log('info', 'info test');\n        assert.deepEqual(debug.args, [['debug test']]);\n        assert.deepEqual(logger.info.args, [['info test']]);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n});\n"],"file":"log.test.mjs"}