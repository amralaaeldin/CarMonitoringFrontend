{"version":3,"sources":["../src/log.test.ts"],"names":["describe","debug","sinon","stub","logger","error","info","beforeEach","reset","test","done","then","fn","assert","deepEqual","args","catch","log","Knifecycle","register","initLogService","run"],"mappings":"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","sourcesContent":["'use strict';\n\nimport assert from 'assert';\nimport sinon from 'sinon';\nimport Knifecycle, { constant } from 'knifecycle';\nimport initLogService from './log';\n\ndescribe('initLogService', () => {\n  const debug = sinon.stub();\n  const logger = {\n    error: sinon.stub(),\n    info: sinon.stub(),\n  };\n\n  beforeEach(() => {\n    debug.reset();\n    logger.info.reset();\n    logger.error.reset();\n  });\n\n  test('should work', (done) => {\n    initLogService({\n      debug,\n      logger,\n    })\n      .then((fn) => {\n        assert('function' === typeof fn);\n        assert.deepEqual(debug.args, [['ðŸ‘£ - Logging service initialized.']]);\n        assert.deepEqual(logger.info.args, []);\n        assert.deepEqual(logger.error.args, []);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n\n  describe('log', () => {\n    test('should work', (done) => {\n      initLogService({\n        debug,\n        logger,\n      })\n        .then((log) => {\n          debug.reset();\n          log('debug', 'debug test');\n          log('stack', 'stack test');\n          log('info', 'info test');\n          log('error', 'error test');\n          assert.deepEqual(debug.args, [['debug test']]);\n          assert.deepEqual(logger.info.args, [['info test']]);\n          assert.deepEqual(logger.error.args, [['stack test'], ['error test']]);\n        })\n        .then(() => done())\n        .catch(done);\n    });\n  });\n\n  test('should work with Knifecycle', (done) => {\n    new Knifecycle()\n      .register(initLogService)\n      .register(constant('debug', debug))\n      .register(constant('logger', logger))\n      .run(['log'])\n      .then(({ log }) => {\n        debug.reset();\n        log('debug', 'debug test');\n        log('info', 'info test');\n        assert.deepEqual(debug.args, [['debug test']]);\n        assert.deepEqual(logger.info.args, [['info test']]);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n});\n"],"file":"log.test.js"}