"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _sinon = _interopRequireDefault(require("sinon"));

var _yerror = _interopRequireDefault(require("yerror"));

var _knifecycle = _interopRequireWildcard(require("knifecycle"));

var _process = _interopRequireDefault(require("./process"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Process service', () => {
  const log = _sinon.default.stub();

  const savedProcessName = global.process.title;

  const processListenerStub = _sinon.default.stub(global.process, 'on');

  let exit;
  let exitPromise;
  let fatalErrorDeferred;
  beforeEach(() => {
    exitPromise = new Promise(resolve => {
      exit = _sinon.default.spy(resolve);
    });
    processListenerStub.reset();
    log.reset();
  });
  afterEach(() => {
    global.process.title = savedProcessName;
  });
  describe('', () => {
    beforeEach(done => {
      (0, _process.default)({
        NODE_ENV: 'development',
        PROCESS_NAME: 'Kikooolol',
        log,
        exit,
        $instance: {
          destroy: () => Promise.resolve()
        },
        $fatalError: {
          promise: new Promise((resolve, reject) => {
            fatalErrorDeferred = {
              resolve,
              reject
            };
          })
        }
      }).then(() => done()).catch(done);
    });
    test('should work', () => {
      _assert.default.deepEqual(log.args, [['warning', 'ðŸ”‚ - Running in "development" environment.'], ['debug', 'ðŸ“‡ - Process service initialized.']], 'Process initialization information');

      _assert.default.equal(global.process.title, 'Kikooolol - development');

      _assert.default.deepEqual(processListenerStub.args.length, 3, 'Process fail/signals listened');
    });
    test('should handle fatal errors', done => {
      fatalErrorDeferred.reject(new _yerror.default('E_AOUCH'));
      exitPromise.then(() => {
        _assert.default.deepEqual(exit.args, [[1]]);
      }).then(() => done()).catch(done);
    });
    test('should handle uncaught exceptions', done => {
      processListenerStub.args.find(call => 'uncaughtException' === call[0])[1](new _yerror.default('E_AOUCH'));
      exitPromise.then(() => {
        _assert.default.deepEqual(exit.args, [[1]]);
      }).then(() => done()).catch(done);
    });
    ['SIGINT', 'SIGTERM'].forEach(signal => test('should handle `signal`', done => {
      processListenerStub.args.find(call => signal === call[0])[1](new _yerror.default('E_AOUCH'));
      exitPromise.then(() => {
        _assert.default.deepEqual(exit.args, [[0]]);
      }).then(() => done()).catch(done);
    }));
  });
  test('should work with Knifecycle', done => {
    new _knifecycle.default().register(_process.default).register((0, _knifecycle.constant)('log', log)).register((0, _knifecycle.constant)('NODE_ENV', 'production')).register((0, _knifecycle.constant)('exit', exit)).run(['process']).then(() => {
      _assert.default.deepEqual(log.args, [['warning', 'ðŸ”‚ - Running in "production" environment.'], ['debug', 'ðŸ“‡ - Process service initialized.']]);
    }).then(() => done()).catch(done);
  });
});
//# sourceMappingURL=process.test.js.map