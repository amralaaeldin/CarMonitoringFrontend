{"version":3,"sources":["../src/counter.test.ts"],"names":["describe","log","sinon","stub","beforeEach","reset","test","counter","assert","deepEqual","args","num","Knifecycle","register","initCounterService","run"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAEAA,QAAQ,CAAC,oBAAD,EAAuB,MAAM;AACnC,QAAMC,GAAG,GAAGC,eAAMC,IAAN,EAAZ;;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACfH,IAAAA,GAAG,CAACI,KAAJ;AACD,GAFS,CAAV;AAIAC,EAAAA,IAAI,CAAC,aAAD,EAAgB,YAAY;AAC9B,UAAMC,OAAO,GAAG,MAAM,sBAAmB;AACvCN,MAAAA;AADuC,KAAnB,CAAtB;AAIA,yBAAO,eAAe,OAAOM,OAA7B;;AACAC,oBAAOC,SAAP,CAAiBR,GAAG,CAACS,IAArB,EAA2B,CACzB,CAAC,OAAD,EAAU,mCAAV,CADyB,CAA3B;AAGD,GATG,CAAJ;AAWAV,EAAAA,QAAQ,CAAC,SAAD,EAAY,MAAM;AACxBM,IAAAA,IAAI,CAAC,aAAD,EAAgB,YAAY;AAC9B,YAAMC,OAAO,GAAG,MAAM,sBAAmB;AACvCN,QAAAA;AADuC,OAAnB,CAAtB;AAIAA,MAAAA,GAAG,CAACI,KAAJ;AAEA,YAAMM,GAAG,GAAG,MAAMJ,OAAO,EAAzB;;AAEAC,sBAAOC,SAAP,CAAiBR,GAAG,CAACS,IAArB,EAA2B,CAAC,CAAC,OAAD,EAAU,sBAAV,EAAkCC,GAAlC,CAAD,CAA3B;AACD,KAVG,CAAJ;AAWD,GAZO,CAAR;AAcAL,EAAAA,IAAI,CAAC,6BAAD,EAAgC,YAAY;AAC9C,UAAM;AAAEC,MAAAA;AAAF,QAAc,MAAM,IAAIK,mBAAJ,GACvBC,QADuB,CACdC,gBADc,EAEvBD,QAFuB,CAEd,0BAAS,KAAT,EAAgBZ,GAAhB,CAFc,EAGvBc,GAHuB,CAGnB,CAAC,SAAD,CAHmB,CAA1B;AAKA,yBAAOR,OAAP;;AACAC,oBAAOC,SAAP,CAAiBR,GAAG,CAACS,IAArB,EAA2B,CACzB,CAAC,OAAD,EAAU,mCAAV,CADyB,CAA3B;AAGD,GAVG,CAAJ;AAWD,CA3CO,CAAR","sourcesContent":["import assert from 'assert';\nimport sinon from 'sinon';\nimport Knifecycle, { constant } from 'knifecycle';\nimport initCounterService from './counter';\n\ndescribe('initCounterService', () => {\n  const log = sinon.stub();\n\n  beforeEach(() => {\n    log.reset();\n  });\n\n  test('should work', async () => {\n    const counter = await initCounterService({\n      log,\n    });\n\n    assert('function' === typeof counter);\n    assert.deepEqual(log.args, [\n      ['debug', 'ðŸ“‡ - Counter service initialized.'],\n    ]);\n  });\n\n  describe('counter', () => {\n    test('should work', async () => {\n      const counter = await initCounterService({\n        log,\n      });\n\n      log.reset();\n\n      const num = await counter();\n\n      assert.deepEqual(log.args, [['debug', 'ðŸ“‡ - Picked a count:', num]]);\n    });\n  });\n\n  test('should work with Knifecycle', async () => {\n    const { counter } = await new Knifecycle()\n      .register(initCounterService)\n      .register(constant('log', log))\n      .run(['counter']);\n\n    assert(counter);\n    assert.deepEqual(log.args, [\n      ['debug', 'ðŸ“‡ - Counter service initialized.'],\n    ]);\n  });\n});\n"],"file":"counter.test.js"}