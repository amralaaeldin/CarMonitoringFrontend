{"version":3,"sources":["../src/random.ts"],"names":["noop","singleton","initRandom","log","random","num","Math"],"mappings":";;;;;;;AAAA;;AAGA,SAASA,IAAT,GAAgB,CAAE;;AAMlB;;;;;;eAOe,yBAAQ;AAAEC,EAAAA,SAAS,EAAE;AAAb,CAAR,EAA6B,6BAAYC,UAAZ,CAA7B,EAAsD,IAAtD,C;AAEf;;;;;;;;;;;;;;;;;;AAcA,eAAeA,UAAf,CAA0B;AACxBC,EAAAA,GAAG,GAAGH;AADkB,CAA1B,EAI2B;AACzBG,EAAAA,GAAG,CAAC,OAAD,EAAU,kCAAV,CAAH;AAEA,SAAOC,MAAP;AAEA;;;;;;;;AAOA,WAASA,MAAT,GAAkB;AAChB,UAAMC,GAAG,GAAGC,IAAI,CAACF,MAAL,EAAZ;AAEAD,IAAAA,GAAG,CAAC,OAAD,EAAU,+BAAV,EAA2CE,GAA3C,CAAH;AAEA,WAAOA,GAAP;AACD;AACF","sourcesContent":["import { autoService, options } from 'knifecycle';\nimport type { LogService } from './log';\n\nfunction noop() {}\n\nexport interface RandomService {\n  (): number;\n}\n\n/* Architecture Note #1.3: Randomness\n\nThe random service is just proxying [`Math.random`\n](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Math/random)\n in a stubbable manner.\n*/\n\nexport default options({ singleton: true }, autoService(initRandom), true);\n\n/**\n * Instantiate the random service\n * @name initRandom\n * @function\n * @param  {Object}   services           The services to inject\n * @param  {Object}   [services.log = noop]     A logging function\n * @return {Promise<Function>}           A promise of the random function\n * @example\n * import initRandom from 'common-services/dist/random';\n *\n * const random = await initRandom({\n *   log: console.log.bind(console),\n * });\n */\nasync function initRandom({\n  log = noop,\n}: {\n  log?: LogService;\n}): Promise<RandomService> {\n  log('debug', 'ðŸŽ² - Random service initialized.');\n\n  return random;\n\n  /**\n   * Returns a new random number\n   * @return {number}   The random number\n   * @example\n   * random()\n   * // Prints: 0.3141592653589793\n   */\n  function random() {\n    const num = Math.random();\n\n    log('debug', 'ðŸŽ² - Created a random number:', num);\n\n    return num;\n  }\n}\n"],"file":"random.js"}