{"version":3,"sources":["../src/random.test.ts"],"names":["describe","log","sinon","stub","beforeEach","reset","test","done","then","random","assert","deepEqual","args","catch","num","Knifecycle","register","initRandomService","run"],"mappings":"AAAA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;AAEAA,QAAQ,CAAC,mBAAD,EAAsB,MAAM;AAClC,QAAMC,GAAG,GAAGC,eAAMC,IAAN,EAAZ;;AAEAC,EAAAA,UAAU,CAAC,MAAM;AACfH,IAAAA,GAAG,CAACI,KAAJ;AACD,GAFS,CAAV;AAIAC,EAAAA,IAAI,CAAC,aAAD,EAAiBC,IAAD,IAAU;AAC5B,yBAAkB;AAChBN,MAAAA;AADgB,KAAlB,EAGGO,IAHH,CAGSC,MAAD,IAAY;AAChB,2BAAO,eAAe,OAAOA,MAA7B;;AACAC,sBAAOC,SAAP,CAAiBV,GAAG,CAACW,IAArB,EAA2B,CACzB,CAAC,OAAD,EAAU,kCAAV,CADyB,CAA3B;AAGD,KARH,EASGJ,IATH,CASQ,MAAMD,IAAI,EATlB,EAUGM,KAVH,CAUSN,IAVT;AAWD,GAZG,CAAJ;AAcAP,EAAAA,QAAQ,CAAC,QAAD,EAAW,MAAM;AACvBM,IAAAA,IAAI,CAAC,aAAD,EAAiBC,IAAD,IAAU;AAC5B,2BAAkB;AAChBN,QAAAA;AADgB,OAAlB,EAGGO,IAHH,CAGSC,MAAD,IAAY;AAChBR,QAAAA,GAAG,CAACI,KAAJ;AACA,cAAMS,GAAG,GAAGL,MAAM,EAAlB;;AAEAC,wBAAOC,SAAP,CAAiBV,GAAG,CAACW,IAArB,EAA2B,CACzB,CAAC,OAAD,EAAU,+BAAV,EAA2CE,GAA3C,CADyB,CAA3B;AAGD,OAVH,EAWGN,IAXH,CAWQ,MAAMD,IAAI,EAXlB,EAYGM,KAZH,CAYSN,IAZT;AAaD,KAdG,CAAJ;AAeD,GAhBO,CAAR;AAkBAD,EAAAA,IAAI,CAAC,6BAAD,EAAiCC,IAAD,IAAU;AAC5C,QAAIQ,mBAAJ,GACGC,QADH,CACYC,eADZ,EAEGD,QAFH,CAEY,0BAAS,KAAT,EAAgBf,GAAhB,CAFZ,EAGGiB,GAHH,CAGO,CAAC,QAAD,CAHP,EAIGV,IAJH,CAIQ,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAgB;AACpB,2BAAOA,MAAP;;AACAC,sBAAOC,SAAP,CAAiBV,GAAG,CAACW,IAArB,EAA2B,CACzB,CAAC,OAAD,EAAU,kCAAV,CADyB,CAA3B;AAGD,KATH,EAUGJ,IAVH,CAUQ,MAAMD,IAAI,EAVlB,EAWGM,KAXH,CAWSN,IAXT;AAYD,GAbG,CAAJ;AAcD,CArDO,CAAR","sourcesContent":["'use strict';\n\nimport assert from 'assert';\nimport sinon from 'sinon';\nimport Knifecycle, { constant } from 'knifecycle';\nimport initRandomService from './random';\n\ndescribe('initRandomService', () => {\n  const log = sinon.stub();\n\n  beforeEach(() => {\n    log.reset();\n  });\n\n  test('should work', (done) => {\n    initRandomService({\n      log,\n    })\n      .then((random) => {\n        assert('function' === typeof random);\n        assert.deepEqual(log.args, [\n          ['debug', 'ðŸŽ² - Random service initialized.'],\n        ]);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n\n  describe('random', () => {\n    test('should work', (done) => {\n      initRandomService({\n        log,\n      })\n        .then((random) => {\n          log.reset();\n          const num = random();\n\n          assert.deepEqual(log.args, [\n            ['debug', 'ðŸŽ² - Created a random number:', num],\n          ]);\n        })\n        .then(() => done())\n        .catch(done);\n    });\n  });\n\n  test('should work with Knifecycle', (done) => {\n    new Knifecycle()\n      .register(initRandomService)\n      .register(constant('log', log))\n      .run(['random'])\n      .then(({ random }) => {\n        assert(random);\n        assert.deepEqual(log.args, [\n          ['debug', 'ðŸŽ² - Random service initialized.'],\n        ]);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n});\n"],"file":"random.test.js"}