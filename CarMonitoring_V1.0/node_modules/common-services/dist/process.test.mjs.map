{"version":3,"sources":["../src/process.test.ts"],"names":["assert","sinon","YError","Knifecycle","constant","initProcessService","describe","log","stub","savedProcessName","global","process","title","processListenerStub","exit","exitPromise","fatalErrorDeferred","beforeEach","Promise","resolve","spy","reset","afterEach","done","NODE_ENV","PROCESS_NAME","$instance","destroy","$fatalError","promise","reject","then","catch","test","deepEqual","args","equal","length","find","call","forEach","signal","register","run"],"mappings":"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","sourcesContent":["import assert from 'assert';\nimport sinon from 'sinon';\nimport YError from 'yerror';\nimport Knifecycle, { constant } from 'knifecycle';\nimport initProcessService from './process';\n\ndescribe('Process service', () => {\n  const log = sinon.stub();\n  const savedProcessName = global.process.title;\n  const processListenerStub = sinon.stub(global.process, 'on');\n  let exit;\n  let exitPromise;\n  let fatalErrorDeferred;\n\n  beforeEach(() => {\n    exitPromise = new Promise((resolve) => {\n      exit = sinon.spy(resolve);\n    });\n    processListenerStub.reset();\n    log.reset();\n  });\n\n  afterEach(() => {\n    global.process.title = savedProcessName;\n  });\n\n  describe('', () => {\n    beforeEach((done) => {\n      initProcessService({\n        NODE_ENV: 'development',\n        PROCESS_NAME: 'Kikooolol',\n        log,\n        exit,\n        $instance: { destroy: () => Promise.resolve() } as Knifecycle,\n        $fatalError: {\n          promise: new Promise((resolve, reject) => {\n            fatalErrorDeferred = { resolve, reject };\n          }),\n        },\n      })\n        .then(() => done())\n        .catch(done);\n    });\n\n    test('should work', () => {\n      assert.deepEqual(\n        log.args,\n        [\n          ['warning', 'ðŸ”‚ - Running in \"development\" environment.'],\n          ['debug', 'ðŸ“‡ - Process service initialized.'],\n        ],\n        'Process initialization information',\n      );\n      assert.equal(global.process.title, 'Kikooolol - development');\n      assert.deepEqual(\n        processListenerStub.args.length,\n        3,\n        'Process fail/signals listened',\n      );\n    });\n\n    test('should handle fatal errors', (done) => {\n      fatalErrorDeferred.reject(new YError('E_AOUCH'));\n\n      exitPromise\n        .then(() => {\n          assert.deepEqual(exit.args, [[1]]);\n        })\n        .then(() => done())\n        .catch(done);\n    });\n\n    test('should handle uncaught exceptions', (done) => {\n      processListenerStub.args.find(\n        (call) => 'uncaughtException' === call[0],\n      )[1](new YError('E_AOUCH'));\n\n      exitPromise\n        .then(() => {\n          assert.deepEqual(exit.args, [[1]]);\n        })\n        .then(() => done())\n        .catch(done);\n    });\n\n    ['SIGINT', 'SIGTERM'].forEach((signal) =>\n      test('should handle `signal`', (done) => {\n        processListenerStub.args.find((call) => signal === call[0])[1](\n          new YError('E_AOUCH'),\n        );\n\n        exitPromise\n          .then(() => {\n            assert.deepEqual(exit.args, [[0]]);\n          })\n          .then(() => done())\n          .catch(done);\n      }),\n    );\n  });\n\n  test('should work with Knifecycle', (done) => {\n    new Knifecycle()\n      .register(initProcessService)\n      .register(constant('log', log))\n      .register(constant('NODE_ENV', 'production'))\n      .register(constant('exit', exit))\n      .run(['process'])\n      .then(() => {\n        assert.deepEqual(log.args, [\n          ['warning', 'ðŸ”‚ - Running in \"production\" environment.'],\n          ['debug', 'ðŸ“‡ - Process service initialized.'],\n        ]);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n});\n"],"file":"process.test.mjs"}