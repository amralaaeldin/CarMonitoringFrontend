"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _sinon = _interopRequireDefault(require("sinon"));

var _knifecycle = _interopRequireWildcard(require("knifecycle"));

var _lock = _interopRequireDefault(require("./lock"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('initLockService', () => {
  const log = _sinon.default.stub();

  const delay = {
    create: _sinon.default.stub(),
    clear: _sinon.default.stub()
  };
  beforeEach(() => {
    log.reset();
  });
  test('should work', async () => {
    const lock = await (0, _lock.default)({
      log,
      delay
    });
    (0, _assert.default)('object' === typeof lock);

    _assert.default.deepEqual(log.args, [['debug', 'ðŸ”’ - Lock service initialized.']]);

    await lock.take('key');
    await lock.take('key2');
    lock.release('key');
    lock.release('key2');
    await Promise.all([lock.take('key').then(() => lock.release('key')), lock.take('key').then(() => lock.release('key')), lock.take('key').then(() => lock.release('key')), lock.take('key').then(() => lock.release('key'))]);
    expect({
      logCalls: log.args
    }).toMatchSnapshot();
  });
  test('should work with Knifecycle', done => {
    new _knifecycle.default().register(_lock.default).register((0, _knifecycle.constant)('log', log)).register((0, _knifecycle.constant)('delay', delay)).run(['lock']).then(({
      lock
    }) => {
      (0, _assert.default)(lock);

      _assert.default.deepEqual(log.args, [['debug', 'ðŸ”’ - Lock service initialized.']]);
    }).then(() => done()).catch(done);
  });
});
//# sourceMappingURL=lock.test.js.map