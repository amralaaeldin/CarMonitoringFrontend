{"version":3,"sources":["../src/lock.test.ts"],"names":["describe","log","sinon","stub","delay","create","clear","beforeEach","reset","test","lock","assert","deepEqual","args","take","release","Promise","all","then","expect","logCalls","toMatchSnapshot","done","Knifecycle","register","initLockService","run","catch"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAGAA,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChC,QAAMC,GAAG,GAAGC,eAAMC,IAAN,EAAZ;;AACA,QAAMC,KAAmB,GAAG;AAC1BC,IAAAA,MAAM,EAAEH,eAAMC,IAAN,EADkB;AAE1BG,IAAAA,KAAK,EAAEJ,eAAMC,IAAN;AAFmB,GAA5B;AAKAI,EAAAA,UAAU,CAAC,MAAM;AACfN,IAAAA,GAAG,CAACO,KAAJ;AACD,GAFS,CAAV;AAIAC,EAAAA,IAAI,CAAC,aAAD,EAAgB,YAAY;AAC9B,UAAMC,IAAI,GAAG,MAAM,mBAAgB;AACjCT,MAAAA,GADiC;AAEjCG,MAAAA;AAFiC,KAAhB,CAAnB;AAKA,yBAAO,aAAa,OAAOM,IAA3B;;AACAC,oBAAOC,SAAP,CAAiBX,GAAG,CAACY,IAArB,EAA2B,CAAC,CAAC,OAAD,EAAU,gCAAV,CAAD,CAA3B;;AAEA,UAAMH,IAAI,CAACI,IAAL,CAAU,KAAV,CAAN;AACA,UAAMJ,IAAI,CAACI,IAAL,CAAU,MAAV,CAAN;AACAJ,IAAAA,IAAI,CAACK,OAAL,CAAa,KAAb;AACAL,IAAAA,IAAI,CAACK,OAAL,CAAa,MAAb;AAEA,UAAMC,OAAO,CAACC,GAAR,CAAY,CAChBP,IAAI,CAACI,IAAL,CAAU,KAAV,EAAiBI,IAAjB,CAAsB,MAAMR,IAAI,CAACK,OAAL,CAAa,KAAb,CAA5B,CADgB,EAEhBL,IAAI,CAACI,IAAL,CAAU,KAAV,EAAiBI,IAAjB,CAAsB,MAAMR,IAAI,CAACK,OAAL,CAAa,KAAb,CAA5B,CAFgB,EAGhBL,IAAI,CAACI,IAAL,CAAU,KAAV,EAAiBI,IAAjB,CAAsB,MAAMR,IAAI,CAACK,OAAL,CAAa,KAAb,CAA5B,CAHgB,EAIhBL,IAAI,CAACI,IAAL,CAAU,KAAV,EAAiBI,IAAjB,CAAsB,MAAMR,IAAI,CAACK,OAAL,CAAa,KAAb,CAA5B,CAJgB,CAAZ,CAAN;AAOAI,IAAAA,MAAM,CAAC;AACLC,MAAAA,QAAQ,EAAEnB,GAAG,CAACY;AADT,KAAD,CAAN,CAEGQ,eAFH;AAGD,GAxBG,CAAJ;AA0BAZ,EAAAA,IAAI,CAAC,6BAAD,EAAiCa,IAAD,IAAU;AAC5C,QAAIC,mBAAJ,GACGC,QADH,CACYC,aADZ,EAEGD,QAFH,CAEY,0BAAS,KAAT,EAAgBvB,GAAhB,CAFZ,EAGGuB,QAHH,CAGY,0BAAS,OAAT,EAAkBpB,KAAlB,CAHZ,EAIGsB,GAJH,CAIO,CAAC,MAAD,CAJP,EAKGR,IALH,CAKQ,CAAC;AAAER,MAAAA;AAAF,KAAD,KAAc;AAClB,2BAAOA,IAAP;;AACAC,sBAAOC,SAAP,CAAiBX,GAAG,CAACY,IAArB,EAA2B,CACzB,CAAC,OAAD,EAAU,gCAAV,CADyB,CAA3B;AAGD,KAVH,EAWGK,IAXH,CAWQ,MAAMI,IAAI,EAXlB,EAYGK,KAZH,CAYSL,IAZT;AAaD,GAdG,CAAJ;AAeD,CApDO,CAAR","sourcesContent":["import assert from 'assert';\nimport sinon from 'sinon';\nimport Knifecycle, { constant } from 'knifecycle';\nimport initLockService from './lock';\nimport type { DelayService } from './delay';\n\ndescribe('initLockService', () => {\n  const log = sinon.stub();\n  const delay: DelayService = {\n    create: sinon.stub(),\n    clear: sinon.stub(),\n  };\n\n  beforeEach(() => {\n    log.reset();\n  });\n\n  test('should work', async () => {\n    const lock = await initLockService({\n      log,\n      delay,\n    });\n\n    assert('object' === typeof lock);\n    assert.deepEqual(log.args, [['debug', 'ðŸ”’ - Lock service initialized.']]);\n\n    await lock.take('key');\n    await lock.take('key2');\n    lock.release('key');\n    lock.release('key2');\n\n    await Promise.all([\n      lock.take('key').then(() => lock.release('key')),\n      lock.take('key').then(() => lock.release('key')),\n      lock.take('key').then(() => lock.release('key')),\n      lock.take('key').then(() => lock.release('key')),\n    ]);\n\n    expect({\n      logCalls: log.args,\n    }).toMatchSnapshot();\n  });\n\n  test('should work with Knifecycle', (done) => {\n    new Knifecycle()\n      .register(initLockService)\n      .register(constant('log', log))\n      .register(constant('delay', delay))\n      .run(['lock'])\n      .then(({ lock }) => {\n        assert(lock);\n        assert.deepEqual(log.args, [\n          ['debug', 'ðŸ”’ - Lock service initialized.'],\n        ]);\n      })\n      .then(() => done())\n      .catch(done);\n  });\n});\n"],"file":"lock.test.js"}